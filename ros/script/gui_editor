#! /usr/bin/env python

from __future__ import print_function

import os
import copy
import yaml
import rospy
import rosnode
import tkinter as tk
import tkSimpleDialog as simpledialog
import tkFileDialog as filedialog
import tkMessageBox as messagebox

from geometry_msgs.msg import Point, PoseStamped, PointStamped
from visualization_msgs.msg import MarkerArray, Marker, InteractiveMarker, InteractiveMarkerControl

from interactive_markers.interactive_marker_server import InteractiveMarkerServer, InteractiveMarkerFeedback
from waltzing_robot.waypoints import Waypoints, Waypoint
from waltzing_robot.music_player import MusicPlayer
from waltzing_robot.utils import Utils
# from waltzing_robot.gui import MainApplication

BGCOLOR='#edead9'
FGCOLOR='#000000'

class GuiEditor(object):

    """Editor for waypoints files"""

    def __init__(self):
        # read ros param
        self.frame = rospy.get_param('frame', 'world')
        # music_file_name = rospy.get_param('~music_file_name', None)
        # self.music_player = MusicPlayer(music_file_name)

        # class variables
        self.marker_id_counter = 0

        # publishers
        self._waypoints_pub = rospy.Publisher('/waypoints_marker', MarkerArray, queue_size=1)

        # subscribers
        self._nav_goal_sub = rospy.Subscriber('/move_base_simple/goal',
                                             PoseStamped,
                                             self._nav_goal_cb)

        # servers
        self.interactive_marker_server = InteractiveMarkerServer("two_dof_marker")


        rospy.sleep(1) # sleep to initialise publishers completely
        self._gui_init()
        self.waypoints = Waypoints()
        self._waypoints_pub.publish(self.waypoints.to_marker_array(self.frame))

    def _before_closing(self):
        self._save_current_wp()
        self.root.destroy()
        self.cleanup()

    def _save_current_wp(self):
        if self.waypoints is not None and len(self.waypoints.waypoints) > 0:
            chose_to_save = messagebox.askyesnocancel(title='Save current waypoints',
                                                    message='Do you want to save current waypoints?')
            if chose_to_save is None:
                return
            if chose_to_save:
                self.save_button_cb()

    def update(self):
        """Main loop for updating gui window
        :returns: None

        """
        self.root.mainloop()
        # while not rospy.is_shutdown():
        #     try:
        #         # self.gui_app.root.update()
        #         self.root.update()
        #     except Exception as e:
        #         rospy.logerr(str(e))
        #         break

    def cleanup(self):
        """Kill neccessary rosnodes/processes to exit successfully
        :returns: None

        """
        gui_exists = False
        try:
            gui_exists = 1 == self.gui_app.root.winfo_exists()
        except Exception as e:
            pass
        if not gui_exists:
            rospy.logfatal("GUI window closed.")
            rospy.signal_shutdown("Gui window was closed")
            nodelist = rosnode.get_node_names()
            rviz_node = None
            for node in nodelist:
                if 'rviz' in node:
                    rviz_node = node
                    break
            if rviz_node is not None:
                rosnode.kill_nodes([rviz_node])

        if self.waypoints is not None:
            print("\n\n")
            print("Printing waypoints for backup")
            print("If an error occurred, just paste the following to a .yaml file")
            print("\n\n")
            print(self.waypoints)
            print()

        rospy.loginfo("Exiting.")

    def _gui_init(self):
        self.root = tk.Tk()
        self.root.title('Waltzing robot')
        self.root.configure(bg=BGCOLOR)
        self.root.configure(height=600)
        self.root.configure(width=800)
        self.root.resizable(width=False, height=False)
        self.root.protocol('WM_DELETE_WINDOW', self._before_closing)
        self.gui_status = tk.Label(self.root, text="Welcome to waltzing robot", bd=1,
                               relief=tk.SUNKEN, anchor=tk.W)
        self.gui_status.pack(side=tk.BOTTOM, fill=tk.X)
        self.gui_status.configure(bg=BGCOLOR, fg=FGCOLOR)
        # self.test_button = tk.Button(self.root, text='test', command=self.test_button_cb)
        # self.test_button.configure(bg=BGCOLOR, fg=FGCOLOR)
        # self.test_button.pack(side=tk.RIGHT)
        self.add_cp_button = tk.Button(self.root, text='Add control point',
                                       command=self.add_cp_cb, state=tk.DISABLED)
        self.add_cp_button.configure(bg=BGCOLOR, fg=FGCOLOR)
        self.add_cp_button.pack(side=tk.TOP)
        self.save_button = tk.Button(self.root, text='save',
                                     command=self.save_button_cb, state=tk.DISABLED)
        self.save_button.configure(bg=BGCOLOR, fg=FGCOLOR)
        self.save_button.pack(side=tk.TOP)
        self.load_button = tk.Button(self.root, text='load',
                                     command=self.load_button_cb)
        self.load_button.configure(bg=BGCOLOR, fg=FGCOLOR)
        self.load_button.pack(side=tk.TOP)

    def test_button_cb(self):
        print("button pressed")

    def save_button_cb(self):
        print("save button pressed")
        current_dir = os.path.abspath(os.path.dirname(__file__))
        ros_dir = os.path.dirname(current_dir)
        waypoints_dir = os.path.join(ros_dir, 'config/waypoints')
        filename = filedialog.asksaveasfilename(title='Save as',
                                                initialdir=waypoints_dir,
                                                defaultextension='.yaml')
        with open(filename, 'w') as file_obj:
            file_obj.write(str(self.waypoints))
        self.gui_status.configure(text='Successfully saved')

    def load_button_cb(self):
        print("load button pressed")
        self._save_current_wp()
        current_dir = os.path.abspath(os.path.dirname(__file__))
        ros_dir = os.path.dirname(current_dir)
        waypoints_dir = os.path.join(ros_dir, 'config/waypoints')
        filename = filedialog.askopenfilename(title='Open',
                                              initialdir=waypoints_dir,
                                              filetypes=[('Waypoint config', ('*.yaml'))])
        with open(filename, 'r') as file_obj:
            waypoint_config = yaml.safe_load(file_obj)
            print(waypoint_config)
            self.waypoints = Waypoints(waypoint_config=waypoint_config)
        self._waypoints_pub.publish(self.waypoints.to_marker_array(self.frame))
        self.gui_status.configure(text='Successfully loaded')
        self.add_cp_button.configure(state=tk.NORMAL)
        self.save_button.configure(state=tk.NORMAL)

    def add_cp_cb(self):
        """Callback for adding a control point point. Ignores the callback if 
        there is no end waypoint. Otherwise, adds a interactive marker at the 
        mid-point of 2 waypoints.

        :returns: None

        """
        print("add_cp_button pressed")
        if len(self.waypoints.waypoints) == 0:
            rospy.logerr('No waypoints selected. Please add a waypoint first')
            return

        # get the middle point of last two waypoints
        current_wp = (self.waypoints.waypoints[-1].x, self.waypoints.waypoints[-1].y)
        last_wp = (0.0, 0.0) if len(self.waypoints.waypoints) == 1 \
                else (self.waypoints.waypoints[-2].x, self.waypoints.waypoints[-2].y)
        midpoint = ((current_wp[0]+last_wp[0])/2.0, (current_wp[1]+last_wp[1])/2.0)

        self._add_interactive_marker(midpoint[0], midpoint[1])
        self.gui_status.configure(text='Control point added')

    def _add_interactive_marker(self, x, y):
        """adds a interactive marker at the position.

        :x: float
        :y: float
        :returns: None

        """
        self.marker_id_counter += 1
        marker = Utils.get_2_dof_interactive_marker('cp_'+str(self.marker_id_counter),
                                                    self.frame, x, y)
        # print(marker)
        self.interactive_marker_server.insert(marker, self.interactive_marker_cb)
        self.interactive_marker_server.applyChanges()
        wp = self.waypoints.waypoints[-1]
        if wp.control_points is None:
            wp.control_points = [{'x': x, 'y': y}]
        else:
            wp.control_points.append({'x': x, 'y': y})
        self._waypoints_pub.publish(self.waypoints.to_marker_array(self.frame))

    def interactive_marker_cb(self, feedback):
        """Updates the control point when interactive marker is moved.

        :feedback: InteractiveMarkerFeedback
        :returns: None

        """
        if not feedback.event_type == InteractiveMarkerFeedback.MOUSE_UP:
            return
        p = feedback.pose.position
        # print(feedback.marker_name + " is now at " + str(p.x) + ", " + str(p.y) + ", " + str(p.z))
        cp_index = int(feedback.marker_name[3:])-1
        wp = self.waypoints.waypoints[-1]
        if len(wp.control_points) > cp_index:
            wp.control_points[cp_index]['x'] = p.x
            wp.control_points[cp_index]['y'] = p.y
        else:
            rospy.logerr("Incorrect interactive marker id") # should never come here
        self._waypoints_pub.publish(self.waypoints.to_marker_array(self.frame))
        self.gui_status.configure(text='Control point moved')

    def _nav_goal_cb(self, msg):
        """Callback for rviz's nav goal messages

        :msg: geometry_msgs.PoseStamped
        :returns: None

        """
        self.add_cp_button.configure(state=tk.NORMAL)
        self.save_button.configure(state=tk.NORMAL)
        x, y, theta = Utils.get_x_y_theta_from_pose(msg.pose)

        # get time from user
        time = None
        while time is None:
            try:
                time = simpledialog.askfloat("Time", "Time for the newly added waypoint:", parent=self.root)
            except Exception as e:
                messagebox.showerror(title='Error', message='Sorry, an error occurred. Please input again')
                continue
            if time is None or time <= 0.0:
                messagebox.showerror(title='Error', message='Invalid time entered. Please input again')
                time = None
                continue
            if len(self.waypoints.waypoints) > 0 and time < self.waypoints.waypoints[-1].time:
                messagebox.showerror(title='Error', message='Time entered was less than previous waypoint\'s time. Please input again')
                time = None
                continue


        wp_dict = {'x': x, 'y': y, 'theta': theta, 'time': time}
        wp = Waypoint(waypoint_dict=wp_dict, default_vel_curve='trapezoid')
        self.waypoints.waypoints.append(wp)
        self.interactive_marker_server.clear()
        self.interactive_marker_server.applyChanges()
        self.marker_id_counter = 0
        self._waypoints_pub.publish(self.waypoints.to_marker_array(self.frame))
        self.gui_status.configure(text='Waypoint added')


if __name__ == "__main__":
    rospy.init_node('gui_editor')
    GE = GuiEditor()
    GE.update()
    GE.cleanup()
