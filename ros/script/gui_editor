#! /usr/bin/env python

from __future__ import print_function

import copy
import rospy
import rosnode
from geometry_msgs.msg import Point, PoseStamped, PoseArray, PolygonStamped, Point32
from visualization_msgs.msg import MarkerArray, Marker
from waltzing_robot.waypoints import Waypoints, Waypoint
from waltzing_robot.vel_curve_handler import VelCurveHandler
from waltzing_robot.music_player import MusicPlayer
from waltzing_robot.utils import Utils
from waltzing_robot.gui import MainApplication

class GuiEditor(object):

    """Editor for waypoints files"""

    def __init__(self):
        # read ros param
        # music_file_name = rospy.get_param('~music_file_name', None)
        # self.music_player = MusicPlayer(music_file_name)

        # class variables
        self.frame = rospy.get_param('frame', 'world')

        # publishers
        self._waypoints_pub = rospy.Publisher('/waypoints_marker', MarkerArray, queue_size=1)

        # subscribers
        self.nav_goal_sub = rospy.Subscriber('/move_base_simple/goal',
                                             PoseStamped,
                                             self._nav_goal_cb)
        
        rospy.sleep(1) # sleep to initialise publishers completely
        self.gui_app = MainApplication()
        self.waypoints = Waypoints()
        self._waypoints_pub.publish(self.waypoints.to_marker_array(self.frame))

    def update(self):
        """Main loop for updating gui window
        :returns: None

        """
        while not rospy.is_shutdown():
            try:
                self.gui_app.root.update()
            except Exception as e:
                rospy.logerr(str(e))
                break

    def cleanup(self):
        """Kill neccessary rosnodes/processes to exit successfully
        :returns: None

        """
        pass
        gui_exists = False
        try:
            gui_exists = 1 == self.gui_app.root.winfo_exists()
        except Exception as e:
            pass
        if not gui_exists:
            rospy.logfatal("GUI window closed.")
            rospy.signal_shutdown("Gui window was closed")
            nodelist = rosnode.get_node_names()
            rviz_node = None
            for node in nodelist:
                if 'rviz' in node:
                    rviz_node = node
                    break
            if rviz_node is not None:
                rosnode.kill_nodes([rviz_node])
        rospy.loginfo("Exiting.")

    def _nav_goal_cb(self, msg):
        """Callback for rviz's nav goal messages

        :msg: geometry_msgs.PoseStamped
        :returns: None

        """
        x, y, theta = Utils.get_x_y_theta_from_pose(msg.pose)
        wp_dict = {'x': x, 'y': y, 'theta': theta, 'time': 2.0, 'control_points':[{'x':1.0, 'y':1.0}]}
        wp = Waypoint(waypoint_dict=wp_dict, default_vel_curve='trapezoid')
        self.waypoints.waypoints.append(wp)
        self._waypoints_pub.publish(self.waypoints.to_marker_array(self.frame))


if __name__ == "__main__":
    rospy.init_node('gui_editor')
    GE = GuiEditor()
    GE.update()
    GE.cleanup()
