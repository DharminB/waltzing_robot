#! /usr/bin/env python

from __future__ import print_function

import yaml
import rospy
import subprocess
from multiprocessing import Queue, Pipe, Process

from geometry_msgs.msg import Point, PoseStamped, PointStamped
from visualization_msgs.msg import MarkerArray, Marker, InteractiveMarker, InteractiveMarkerControl

from interactive_markers.interactive_marker_server import InteractiveMarkerServer, InteractiveMarkerFeedback
from waltzing_robot.waypoints import Waypoints, Waypoint
from waltzing_robot.utils import Utils
from waltzing_robot.gui import MainApplication

BGCOLOR='#edead9'
FGCOLOR='#000000'

class GuiEditor(object):

    """Editor for waypoints files"""

    def __init__(self):
        self.frame = rospy.get_param('frame', 'world')

        self.marker_id_counter = 0

        self._waypoints_pub = rospy.Publisher('/waypoints_marker', MarkerArray, queue_size=1)
        rospy.Subscriber('/move_base_simple/goal', PoseStamped, self._nav_goal_cb)
        self.interactive_marker_server = InteractiveMarkerServer("two_dof_marker")

        self._create_child_process()

        rospy.sleep(1.0)
        self.waypoints = Waypoints()
        self._waypoints_pub.publish(self.waypoints.to_marker_array(self.frame))


    def update(self):
        while not rospy.is_shutdown():
            if self.connection.poll():
                message = self.connection.recv()
                if message == 'close':
                    break
                if message == 'add_cp':
                    self._add_interactive_marker()
                if 'load:' in message:
                    filename = message.split(':')[1]
                    with open(filename, 'r') as file_obj:
                        waypoint_config = yaml.safe_load(file_obj)
                        print(waypoint_config)
                        self.waypoints = Waypoints(waypoint_config=waypoint_config)
                    self._waypoints_pub.publish(self.waypoints.to_marker_array(self.frame))
                if 'save:' in message:
                    filename = message.split(':')[1]
                    with open(filename, 'w') as file_obj:
                        file_obj.write(str(self.waypoints))
            rospy.sleep(0.2)

    def cleanup(self):
        if self.app_process.is_alive():
            self.connection.send('close')
            self.connection.close()
            self.app_process.terminate()
        rospy.loginfo('Please hover over gui window to quit.')
        self.app_process.join()
        if self.rviz_process is not None and self.rviz_process.poll() is None:
            self.rviz_process.terminate()
            self.rviz_process.wait()
        rospy.loginfo('Incase an error occured. Paste following in a .yaml file')
        print(self.waypoints)

    def _create_child_process(self):
        self.connection, gui_connection = Pipe()
        self.app = MainApplication(gui_connection)
        self.app_process = Process(target=self.app.mainloop)
        self.app_process.daemon = True
        self.app_process.start()
        rviz_config_file = rospy.get_param('~rviz_config_file', None)
        if rviz_config_file is not None:
            command = 'rosrun rviz rviz -d ' + rviz_config_file
            self.rviz_process = subprocess.Popen(command.split())
        else:
            self.rviz_process = None

    def _save_current_wp(self):
        if self.waypoints is not None and len(self.waypoints.waypoints) > 0:
            chose_to_save = messagebox.askyesnocancel(title='Save current waypoints',
                                                    message='Do you want to save current waypoints?')
            if chose_to_save is None:
                return
            if chose_to_save:
                self.save_button_cb()

    def _add_interactive_marker(self):
        """adds a interactive marker at the position.

        :returns: None

        """
        if len(self.waypoints.waypoints) == 0:
            rospy.logerr('No waypoints selected. Please add a waypoint first')
            return

        # get the middle point of last two waypoints
        current_wp = (self.waypoints.waypoints[-1].x, self.waypoints.waypoints[-1].y)
        last_wp = (0.0, 0.0) if len(self.waypoints.waypoints) == 1 \
                else (self.waypoints.waypoints[-2].x, self.waypoints.waypoints[-2].y)
        x, y = ((current_wp[0]+last_wp[0])/2.0, (current_wp[1]+last_wp[1])/2.0)

        self.marker_id_counter += 1
        marker = Utils.get_2_dof_interactive_marker('cp_'+str(self.marker_id_counter),
                                                    self.frame, x, y)
        # print(marker)
        self.interactive_marker_server.insert(marker, self.interactive_marker_cb)
        self.interactive_marker_server.applyChanges()
        wp = self.waypoints.waypoints[-1]
        if wp.control_points is None:
            wp.control_points = [{'x': x, 'y': y}]
        else:
            wp.control_points.append({'x': x, 'y': y})
        self._waypoints_pub.publish(self.waypoints.to_marker_array(self.frame))

    def interactive_marker_cb(self, feedback):
        """Updates the control point when interactive marker is moved.

        :feedback: InteractiveMarkerFeedback
        :returns: None

        """
        if not feedback.event_type == InteractiveMarkerFeedback.MOUSE_UP:
            return
        p = feedback.pose.position
        # print(feedback.marker_name + " is now at " + str(p.x) + ", " + str(p.y) + ", " + str(p.z))
        cp_index = int(feedback.marker_name[3:])-1
        wp = self.waypoints.waypoints[-1]
        if len(wp.control_points) > cp_index:
            wp.control_points[cp_index]['x'] = p.x
            wp.control_points[cp_index]['y'] = p.y
        else:
            rospy.logerr("Incorrect interactive marker id") # should never come here
        self._waypoints_pub.publish(self.waypoints.to_marker_array(self.frame))
        self.connection.send('status:Control point moved')

    def _nav_goal_cb(self, msg):
        """Callback for rviz's nav goal messages

        :msg: geometry_msgs.PoseStamped
        :returns: None

        """
        x, y, theta = Utils.get_x_y_theta_from_pose(msg.pose)

        # clear pipe
        while self.connection.poll():
            self.connection.recv()
        self.connection.send('time')

        # get time from user
        time = None
        while time is None:
            time = self.connection.recv()
            if time is None or time <= 0.0:
                self.connection.send('null_time')
                time = None
                continue
            if len(self.waypoints.waypoints) > 0 and time < self.waypoints.waypoints[-1].time:
                self.connection.send('invalid_time')
                time = None
                continue

        wp_dict = {'x': x, 'y': y, 'theta': theta, 'time': time}
        wp = Waypoint(waypoint_dict=wp_dict, default_vel_curve='trapezoid')
        self.waypoints.waypoints.append(wp)
        self.interactive_marker_server.clear()
        self.interactive_marker_server.applyChanges()
        self.marker_id_counter = 0
        self._waypoints_pub.publish(self.waypoints.to_marker_array(self.frame))
        self.connection.send('status:waypoint added')
        self.connection.send('enable:save_button')
        self.connection.send('enable:add_cp_button')


if __name__ == "__main__":
    rospy.init_node('gui_editor')
    GE = GuiEditor()
    GE.update()
    GE.cleanup()
